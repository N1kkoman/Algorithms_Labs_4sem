# d - количество символов во входном алфавите
d = 256

def search(pat, txt, q):
    M = len(pat)
    N = len(txt)
    i = 0
    j = 0
    p = 0 # хэш-значение для образца
    t = 0 # хэш-значение для текста
    h = 1

    # Значение h будет "pow(d, M-1)% q"
    for _ in range(M-1):
        h = (h * d) % q

    # Вычисляем хэш-значение для образца и первого окна текста
    for i in range(M):
        p = (d * p + ord(pat[i])) % q
        t = (d * t + ord(txt[i])) % q

    # Сдвигаем образец по тексту по одному символу
    for i in range(N-M + 1):
        # Проверяем хэш-значения текущего окна текста и образца,
        # если хэш-значения совпадают, тогда проверяем
        # символы по одному
        if p == t:
            # Проверяем символы по одному
            for j in range(M):
                if txt[i + j] != pat[j]:
                    break

            j += 1
            # если p == t и pat[0...M-1] = txt[i, i + 1, ...i + M-1]
            if j == M:
                print("Образец найден по индексу " + str(i))

        # Вычисляем хэш-значение для следующего окна текста: Удаляем
        # ведущую цифру, добавляем конечную цифру
        if i < N-M:
            t = (d*(t - ord(txt[i]) * h) + ord(txt[i + M])) % q

            # Можем получить отрицательные значения t, преобразуем их в положительные
            if t < 0:
                t = t + q

# Программа для проверки вышеуказанной функции
with open('input.txt', 'r', encoding='utf-8') as file:
    txt = file.read().strip()
pattern = input("Введите строку поиска: ")
q = 101 # Простое число
search(pattern, txt, q)
